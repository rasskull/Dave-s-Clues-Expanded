// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thesuperdave
// credit to © MichelT for VWAP
// 
//                                                       
//                       ---=-----                       
//                 ---------------------                 
//              ==-------------------------              
//            ==-----------------------------            
//          ===-------====----------===--------          
//        +==------==    *==-----=   *++==-------        
//       ===------        ==-----       *+==------       
//      ==-------        *=------         +==------      
//     *==-------      -=----------       +==------=     
//    ++=--------------------------------==---------=    
//    ===--------------------------------------------    
//    ===--------------------------------------------    
//   *+=---------------------------------------------    
//   *+=---------------------------------------------    
//   *+=-------=-------------------------------------    
//   *+=------====-------------------------==--------    
//   *+=-------=+++=--------------------=-+*=--------    
//   *+=-------- *+--------=-------------= *=--------    
//   *+=-------- *+=------=+*++*==-------- *=======--    
//   *+=-------- *+--------    *=---------  +++==++      
//   *+=-------- *+---------   *=--------- +=--------    
//   *+=-------- *+========    *==-------- *=--------    
//   *+=--------   --===---    *==-------- *=--------    
//    +========  ++--------    *=========  *=--------    
//       ===     *+=-------=       ===     *+========    
//   *=--------- *+=-------=    =--------       +        
//   *+=-------- *+=-------=   *=---------               
//   *+=-------- *+=-------=   *==--------               
//    +++======  *+=-------=   *=---------                             
//               *+=-------=   *=========                
//               *+=-------=     ======                  
//               *+---------        =                    
//               *+========                              
//                 +++====    

//@version=6
indicator(title = 'Dave\'s Clues', shorttitle = 'Daves\'s Clues', overlay = true)

// SETTINGS -----------------------------
// text, info etc...
display_set = display.all - display.price_scale - display.status_line
ema_text = '----------------- EMA ------------------'
vwap = '----------------- VWAP -----------------'
dwmLevels = '------------- D/W/M Levels -------------'
groupCog = '---------- +/- COG Alerts --------------'
groupEma = '------------- 20/50/200 EMA ------------'
lineLabels = '------------- Line Labels ------------'
groupLineLabels = '------------- Line Label Settings ------------'
groupVwap = '------- Auto Anchored D/W/M VWAP -------'
groupDwmLevels = '------------- D/W/M Levels -------------'

// colors
ema9color                       = color.rgb(0, 143, 36, 31)
ema20color                      = #00e1ff
ema50color                      = color.rgb(0, 106, 255)
ema100color                     = color.rgb(194,114,208)
ema200color                     = #d900ff
dVwapColor                      = color.new(color.white, 0)
dVwap2Color                      = color.new(#b4b4b4, 0)
wVwapColor                      = color.rgb(255, 235, 59, 20)
mVwapColor                      = #ff99009a
yVwapColor                      = color.rgb(90, 90, 90)
globexLevelColor                = color.rgb(120, 123, 134, 17)
fLevelColor                     = color.rgb(162, 0, 255, 24)
fWickLevelColor                 = color.rgb(162, 0, 255, 40)
dLevelColor                     = color.rgb(16, 105, 207, 18)
wLevelColor                     = color.rgb(218, 221, 8, 58)
mLevelColor                     = color.rgb(255, 153, 0, 23)
lineLabelColor                  = color.new(color.white, 50)
f_Line_Color = input.color(defval = fLevelColor, title = '4 Hour Body', inline = dwmLevels, group = groupDwmLevels)
f_Wick_Color = input.color(defval = fWickLevelColor, title = '4 Hour Wicks', inline = dwmLevels, group = groupDwmLevels)
d_Line_Color = input.color(defval = dLevelColor, title = 'Daily Level', inline = dwmLevels, group = groupDwmLevels)
w_Line_Color = input.color(defval = wLevelColor, title = 'Weekly Level', inline = dwmLevels, group = groupDwmLevels)
m_Line_Color = input.color(defval = mLevelColor, title = 'Monthly Level', inline = dwmLevels, group = groupDwmLevels)
pm_hi_color         = input.color(defval=color.rgb(53, 165, 19), title="PreMarket Hi Color", inline=dwmLevels, group=groupDwmLevels)
pm_lo_color          = input.color(defval=color.rgb(192, 20, 20), title="PreMarket Lo Color", inline=dwmLevels, group=groupDwmLevels)

// GLOBALS /  CALCS ----------------------------
StartTime() => hour(time, "UTC") == 14 and minute(time, "UTC") >= 30 and bar_index>60
Offset(X) =>
    Bar = math.min(time - time[1], time[1] - time[2])
    time + Bar * (1 + X * 1)
f_get_changePercentage(_p1, _p2) =>
    (_p1 - _p2) * 100 / _p2

current_tf = timeframe.period
displayLtf = timeframe.isintraday and timeframe.multiplier <= 5
displayMtf = timeframe.isintraday and timeframe.multiplier >= 6 and timeframe.multiplier <= 60
displayHtf = timeframe.isdwm
displayVwapD = current_tf == 'D'
displayVwapLtf = displayLtf
isFutures = syminfo.type == 'futures'
isForex = syminfo.type == 'forex'

src = close
ema9 = ta.ema(src, 9)
ema20 = ta.ema(src, 20)
ema50 = ta.ema(src, 50)
ema100 = ta.ema(src, 100)
ema200 = ta.ema(src, 200)
dev = 2.0 * ta.stdev(close, 20)

MILLIS_IN_DAY = 86400000
dwmBarTime = timeframe.isdwm ? time : time('D')

globexBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
dBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
wBlank = '\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'
mBlank = '‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏'

var float _gH     = na
var float _gL      = na
var bool isGlobex      = false
var int premarketOpenBar= na

if session.isfirstbar
    isGlobex           := true
    _gH           := high
    _gL            := low
    premarketOpenBar    := bar_index

if StartTime() and not StartTime()[1] and not session.isfirstbar
    isGlobex := false

_gH := isGlobex and high > _gH ? high : _gH
_gL := isGlobex and low < _gL ? low : _gL

[_fH, _fL, _fC, _fO] = request.security(syminfo.tickerid, '240', [high[0], low[0], close[0], open[0]], barmerge.gaps_off, barmerge.lookahead_on)
[_dH, _dL, _dC] = request.security(syminfo.tickerid, 'D', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)
[_wH, _wL, _wC] = request.security(syminfo.tickerid, 'W', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)
[_mH, _mL, _mC] = request.security(syminfo.tickerid, 'M', [high[1], low[1], close[1]], barmerge.gaps_off, barmerge.lookahead_on)

// INPUTS --------------------------------

settingEma9Color = input(defval = ema9color, title = '9 EMA', inline = ema_text, group = groupEma)
settingEma20Color = input(defval = ema20color, title = '20 EMA', inline = ema_text, group = groupEma)
settingEma50Color = input(defval = ema50color, title = '50 EMA', inline = ema_text, group = groupEma)
settingEma100Color = input(defval = ema100color, title = '100 EMA', inline = ema_text, group = groupEma)
settingEma200Color = input(defval = ema200color, title = '200 EMA', inline = ema_text, group = groupEma)

dvColor         = input(defval = dVwapColor, title="D VWAP Color", inline = vwap, group = groupVwap)
dv2Color         = input(defval = dVwap2Color, title="D2 VWAP Color", inline = vwap, group = groupVwap)
wvColor         = input(defval = wVwapColor, title="W VWAP Color", inline = vwap, group = groupVwap)
mvColor         = input(defval = mVwapColor, title="M VWAP Color", inline = vwap, group = groupVwap)
yvColor         = input(defval = yVwapColor, title="Y VWAP Color", inline = vwap, group = groupVwap)

settingLineColor = input(defval = lineLabelColor, title = 'Line Label Color', inline = lineLabels, group = groupLineLabels)
showLineLabels  = input.bool(defval = false, title = "Show line labels?", inline = vwap, group = groupLineLabels)

showGlobexLevels    = input.bool(defval = true, title = "Show Globex Hi/Lo?", inline = "globex", group = groupDwmLevels)
showGlobexLabels    = input.bool(defval = true, title = 'Show Globex Label?', inline = "globex", group = groupDwmLevels)
extendLines = input.bool(defval = false, title = 'Extend Levels Across Screen?', inline = dwmLevels, group = groupDwmLevels)
dwmLineWidth = input.int(defval = 2, title = 'Levels Line Width', minval = 1, maxval = 4, step = 1, group = groupDwmLevels)

// Define HTF visibility
var bool isHTF = timeframe.isdwm ? true : false

// EMAs -----------------------------

plot(not isHTF ? ema9 : na, title = 'EMA-9', color = settingEma9Color, offset = 0, linewidth = 2, display = display_set)
plot(ema20, title = 'EMA-20', color = settingEma20Color, offset = 0, linewidth = 2, display = display_set)
plot(not isHTF ? ema50 : na, title="EMA-50", color = settingEma50Color, offset = 0, linewidth = 2, display = display_set)
plot(ema100, title="EMA-100", color = settingEma100Color, offset = 0, linewidth = 2, display = display_set)
plot(ema200, title="EMA-200", color = settingEma200Color, offset = 0, linewidth = 2, display = display_set)
ema9_lbl       = showLineLabels and not isHTF ? label.new(bar_index, ema9, text = "EMA 9", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
ema20_lbl       = showLineLabels ? label.new(bar_index, ema20, text = "EMA 20", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
ema50_lbl       = showLineLabels and not isHTF ? label.new(bar_index, ema50, text = "EMA 50", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
ema100_lbl       = showLineLabels ? label.new(bar_index, ema100, text = "EMA 100", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
ema200_lbl       = showLineLabels ? label.new(bar_index, ema200, text = "EMA 200", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
label.delete(ema9_lbl[1])
label.delete(ema20_lbl[1])
label.delete(ema50_lbl[1])
label.delete(ema100_lbl[1])
label.delete(ema200_lbl[1])

// VWAP - updated using built-in function
d1Anchor = timeframe.change("D")
[d1Vwap, d1Upper, d1Vwap_lblower] = ta.vwap(hlc3, d1Anchor, 1)
plot(not isHTF ? d1Vwap : na, title="Day 1 VWAP", style = plot.style_line, color=dvColor, linewidth = 1, display = display_set)

//d2Anchor = timeframe.change("2D")
//[d2Vwap, d2Upper, d2Vwap_lblower] = ta.vwap(hlc3, d2Anchor, 1)
//plot(not isForex ? d2Vwap : na, title="Day 2 VWAP", style = plot.style_line, color=dv2Color, linewidth = 1, display = display_set)

wAnchor = timeframe.change("W")
[wVwap, wUpper, wVwap_lblower] = ta.vwap(hlc3, wAnchor, 1)
plot(not isForex ? wVwap : na, title="Weekly VWAP", style = plot.style_line, color=wvColor, linewidth = 1, display = display_set)

mAnchor = timeframe.change("1M")
[mVwap, mUpper, mVwap_lblower] = ta.vwap(hlc3, mAnchor, 1)
plot(not isForex ? mVwap : na, title="Monthly VWAP", style = plot.style_line, color=mvColor, linewidth = 1, display = display_set)

yAnchor = timeframe.change("12M")
[yVwap, yUpper, yLower] = ta.vwap(hlc3, yAnchor, 1)
plot(not isForex ? yVwap : na, title="Yearly VWAP", style = plot.style_line, color=yvColor, linewidth = 1, display = display_set)

dVwap_lbl       = showLineLabels and not isHTF ? label.new(bar_index, d1Vwap, text = "Day 1 VWAP", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
//d2Vwap_lbl       = showLineLabels ? label.new(bar_index, d2Vwap, text = "Day 2 VWAP", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
wVwap_lbl       = showLineLabels ? label.new(bar_index, wVwap, text = "Weekly VWAP", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
mVwap_lbl       = showLineLabels ? label.new(bar_index, mVwap, text = "Monthly VWAP", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
yVwap_lbl       = showLineLabels ? label.new(bar_index, yVwap, text = "Yearly VWAP", color = color.rgb(0, 0, 0, 100), style = label.style_label_left, textcolor = settingLineColor, size = size.small, textalign = text.align_center) : na
label.delete(dVwap_lbl[1])
//label.delete(d2Vwap_lbl[1])
label.delete(wVwap_lbl[1])
label.delete(mVwap_lbl[1])
label.delete(yVwap_lbl[1])


// DWM / PreMarket / Globex PRICE LEVELS --------------------------
globex_High_Line = not timeframe.isdwm ? line.new(time, _gH, time + 1, _gH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = globexLevelColor, style = line.style_solid, width = dwmLineWidth) : na
globex_Low_Line = not timeframe.isdwm ? line.new(time, _gL, time + 1, _gL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = globexLevelColor, style = line.style_solid, width = dwmLineWidth) : na
line.delete(globex_High_Line[1])
line.delete(globex_Low_Line[1])
label_globex_High = not timeframe.isdwm ? label.new(bar_index, _gH, text = globexBlank + 'Globex High : ' + str.tostring(_gH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = globexLevelColor, size = size.small, textalign = text.align_center) : na
label_globex_Low = not timeframe.isdwm ? label.new(bar_index, _gL, text = globexBlank + 'Globex Low : ' + str.tostring(_gL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = globexLevelColor, size = size.small, textalign = text.align_center) : na
label.delete(label_globex_High[1])
label.delete(label_globex_Low[1])

//four_WickTop_Line = not timeframe.isdwm ? line.new(time, _fH, time + 1, _fH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = f_Wick_Color, style = line.style_solid, width = dwmLineWidth) : na
//four_High_Line = not timeframe.isdwm ? line.new(time, _fO, time + 1, _fO, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = f_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
//four_Low_Line = not timeframe.isdwm ? line.new(time, _fC, time + 1, _fC, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = f_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
//four_WickBot_Line = not timeframe.isdwm ? line.new(time, _fL, time + 1, _fL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = f_Wick_Color, style = line.style_solid, width = dwmLineWidth) : na
//line.delete(four_WickTop_Line[1])
//line.delete(four_High_Line[1])
//line.delete(four_Low_Line[1])
//line.delete(four_WickBot_Line[1])

daily_High_Line = not timeframe.isdwm ? line.new(time, _dH, time + 1, _dH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = d_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
daily_Low_Line = not timeframe.isdwm ? line.new(time, _dL, time + 1, _dL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = d_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(daily_High_Line[1])
line.delete(daily_Low_Line[1])
label_daily_High = not timeframe.isdwm ? label.new(bar_index, _dH, text = dBlank + 'Prev D High : ' + str.tostring(_dH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center) : na
label_daily_Low = not timeframe.isdwm ? label.new(bar_index, _dL, text = dBlank + 'Prev D Low : ' + str.tostring(_dL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_daily_High[1])
label.delete(label_daily_Low[1])

weekly_High_Line = not timeframe.isdwm ? line.new(time, _wH, time + 1, _wH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = w_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
weekly_Low_Line = not timeframe.isdwm ? line.new(time, _wL, time + 1, _wL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = w_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(weekly_High_Line[1])
line.delete(weekly_Low_Line[1])
label_weekly_High = not timeframe.isdwm ? label.new(bar_index, _wH, text = wBlank + 'Prev W High : ' + str.tostring(_wH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center) : na
label_weekly_Low = not timeframe.isdwm ? label.new(bar_index, _wL, text = wBlank + 'Prev W Low : ' + str.tostring(_wL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_weekly_High[1])
label.delete(label_weekly_Low[1])

monthly_High_Line = not timeframe.isdwm ? line.new(time, _mH, time + 1, _mH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = m_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
monthly_Low_Line = not timeframe.isdwm ? line.new(time, _mL, time + 1, _mL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = m_Line_Color, style = line.style_solid, width = dwmLineWidth) : na
line.delete(monthly_High_Line[1])
line.delete(monthly_Low_Line[1])
label_monthly_High = not timeframe.isdwm ? label.new(bar_index, _mH, text = mBlank + 'Prev M High : ' + str.tostring(_mH, format.mintick) + '\n', color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center) : na
label_monthly_Low = not timeframe.isdwm ? label.new(bar_index, _mL, text = mBlank + 'Prev M Low : ' + str.tostring(_mL, format.mintick) + '\n', color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center) : na
label.delete(label_monthly_High[1])
label.delete(label_monthly_Low[1])
// ---------